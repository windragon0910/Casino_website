"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = exports.applyDefaultOptionValues = exports.getRequestOptions = exports.makeRequest = exports.getPrivateHeaders = void 0;
var crypto_1 = require("crypto");
var https_1 = require("https");
var querystring_1 = require("querystring");
var constants_1 = require("./constants");
var error_1 = __importDefault(require("./error"));
var validation_1 = require("./validation");
var getPrivateHeaders = function (credentials, options) {
    var secret = credentials.secret;
    var paramString = (0, querystring_1.stringify)(options);
    var signature = (0, crypto_1.createHmac)('sha512', secret)
        .update(paramString)
        .digest('hex');
    return {
        'Content-Type': 'application/x-www-form-urlencoded',
        HMAC: signature,
    };
};
exports.getPrivateHeaders = getPrivateHeaders;
var makeRequest = function (reqOps, options) {
    return new Promise(function (resolve, reject) {
        var req = (0, https_1.request)(reqOps, function (res) {
            var chunks = '';
            res.setEncoding('utf8');
            res.on('data', function (chunk) {
                chunks += chunk;
            });
            res.on('end', function () {
                var data = {
                    error: constants_1.API_VALID_RESPONSE,
                };
                try {
                    data = JSON.parse(chunks);
                }
                catch (e) {
                    return reject(new error_1.default('Invalid response', { data: chunks }));
                }
                if (data.error !== constants_1.API_VALID_RESPONSE) {
                    return reject(new error_1.default(data.error, { data: data }));
                }
                return resolve(data.result);
            });
        });
        req.on('error', reject);
        req.write((0, querystring_1.stringify)(options));
        return req.end();
    });
};
exports.makeRequest = makeRequest;
var getRequestOptions = function (credentials, options) {
    return {
        protocol: constants_1.API_PROTOCOL,
        method: 'post',
        host: constants_1.API_HOST,
        path: constants_1.API_PATH,
        headers: (0, exports.getPrivateHeaders)(credentials, options),
    };
};
exports.getRequestOptions = getRequestOptions;
var applyDefaultOptionValues = function (credentials, options) {
    return __assign(__assign({}, options), { version: constants_1.API_VERSION, format: constants_1.API_FORMAT, key: credentials.key });
};
exports.applyDefaultOptionValues = applyDefaultOptionValues;
var request = function (credentials, options, callback) { return __awaiter(void 0, void 0, void 0, function () {
    var reqOps, response, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                (0, validation_1.validatePayload)(options);
                options = (0, exports.applyDefaultOptionValues)(credentials, options);
                reqOps = (0, exports.getRequestOptions)(credentials, options);
                return [4, (0, exports.makeRequest)(reqOps, options)];
            case 1:
                response = _a.sent();
                if (callback) {
                    return [2, callback(null, response)];
                }
                return [2, response];
            case 2:
                e_1 = _a.sent();
                if (callback) {
                    return [2, callback(e_1)];
                }
                return [2, Promise.reject(e_1)];
            case 3: return [2];
        }
    });
}); };
exports.request = request;
