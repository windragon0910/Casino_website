"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coinpayments = void 0;
var constants_1 = require("./constants");
var error_1 = __importDefault(require("./error"));
var mappers_1 = require("./mappers");
var internal_1 = require("./internal");
var validation_1 = require("./validation");
var Coinpayments = (function () {
    function Coinpayments(_a) {
        var _b = _a.key, key = _b === void 0 ? '' : _b, _c = _a.secret, secret = _c === void 0 ? '' : _c;
        if (!key) {
            throw new error_1.default('Missing public key');
        }
        if (!secret) {
            throw new error_1.default('Missing private key');
        }
        this.credentials = { key: key, secret: secret };
        this.getBasicInfo = this.getBasicInfo.bind(this);
        this.rates = this.rates.bind(this);
        this.balances = this.balances.bind(this);
        this.getDepositAddress = this.getDepositAddress.bind(this);
        this.createTransaction = this.createTransaction.bind(this);
        this.getCallbackAddress = this.getCallbackAddress.bind(this);
        this.getTx = this.getTx.bind(this);
        this.getTxList = this.getTxList.bind(this);
        this.getTxMulti = this.getTxMulti.bind(this);
        this.createTransfer = this.createTransfer.bind(this);
        this.convertCoins = this.convertCoins.bind(this);
        this.convertLimits = this.convertLimits.bind(this);
        this.getWithdrawalHistory = this.getWithdrawalHistory.bind(this);
        this.getWithdrawalInfo = this.getWithdrawalInfo.bind(this);
        this.getConversionInfo = this.getConversionInfo.bind(this);
        this.getProfile = this.getProfile.bind(this);
        this.tagList = this.tagList.bind(this);
        this.updateTagProfile = this.updateTagProfile.bind(this);
        this.claimTag = this.claimTag.bind(this);
        this.cancelWithdrawal = this.cancelWithdrawal.bind(this);
        this.createWithdrawal = this.createWithdrawal.bind(this);
        this.createMassWithdrawal = this.createMassWithdrawal.bind(this);
    }
    Coinpayments.prototype.rates = function (options, callback) {
        if (!options && !callback) {
            options = {};
        }
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        var requestPayload = (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.RATES,
        });
        return (0, internal_1.request)(this.credentials, requestPayload, callback);
    };
    Coinpayments.prototype.createTransaction = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CREATE_TRANSACTION,
        }), callback);
    };
    Coinpayments.prototype.balances = function (options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.BALANCES,
        }), callback);
    };
    Coinpayments.prototype.createWithdrawal = function (options, callback) {
        options = __assign({ auto_confirm: 1 }, options);
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CREATE_WITHDRAWAL,
        }), callback);
    };
    Coinpayments.prototype.createMassWithdrawal = function (withdrawalArray, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapMassWithdrawalPayload)((0, validation_1.filterMassWithdrawalOpts)(withdrawalArray), {
            cmd: constants_1.CMDS.CREATE_MASS_WITHDRAWAL,
        }), callback);
    };
    Coinpayments.prototype.cancelWithdrawal = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CANCEL_WITHDRAWAL,
        }), callback);
    };
    Coinpayments.prototype.getTx = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_TX,
        }), callback);
    };
    Coinpayments.prototype.getWithdrawalInfo = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_WITHDRAWAL_INFO,
        }), callback);
    };
    Coinpayments.prototype.getTxMulti = function (txIdArray, callback) {
        if (!(txIdArray instanceof Array) || !txIdArray.length) {
            var error = new error_1.default('Invalid argument', { txIdArray: txIdArray });
            if (callback) {
                return callback(error);
            }
            return Promise.reject(error);
        }
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapGetTxMultiPayload)(txIdArray, {
            cmd: constants_1.CMDS.GET_TX_MULTI,
        }), callback);
    };
    Coinpayments.prototype.getTxList = function (options, callback) {
        if (!options && !callback) {
            options = {};
        }
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_TX_LIST,
        }), callback);
    };
    Coinpayments.prototype.getBasicInfo = function (callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)({}, {
            cmd: constants_1.CMDS.GET_BASIC_INFO,
        }), callback);
    };
    Coinpayments.prototype.getDepositAddress = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_DEPOSIT_ADDRESS,
        }), callback);
    };
    Coinpayments.prototype.getCallbackAddress = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_CALLBACK_ADDRESS,
        }), callback);
    };
    Coinpayments.prototype.createTransfer = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CREATE_TRANSFER,
            auto_confirm: true,
        }), callback);
    };
    Coinpayments.prototype.convertCoins = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CONVERT,
        }), callback);
    };
    Coinpayments.prototype.convertLimits = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CONVERT_LIMITS,
        }), callback);
    };
    Coinpayments.prototype.getWithdrawalHistory = function (options, callback) {
        if (typeof options === 'function') {
            callback = options;
            options = {};
        }
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_WITHDRAWAL_HISTORY,
        }), callback);
    };
    Coinpayments.prototype.getConversionInfo = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_CONVERSATION_INFO,
        }), callback);
    };
    Coinpayments.prototype.getProfile = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.GET_TAG_INFO,
        }), callback);
    };
    Coinpayments.prototype.tagList = function (callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)({}, {
            cmd: constants_1.CMDS.GET_TAG_LIST,
        }), callback);
    };
    Coinpayments.prototype.updateTagProfile = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.UPDATE_TAG,
        }), callback);
    };
    Coinpayments.prototype.claimTag = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CLAIM_TAG,
        }), callback);
    };
    Coinpayments.prototype.renewTag = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.RENEW_TAG,
        }), callback);
    };
    Coinpayments.prototype.deleteTag = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.DELETE_TAG,
        }), callback);
    };
    Coinpayments.prototype.claimCoupon = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.CLAIM_COUPON,
        }), callback);
    };
    Coinpayments.prototype.buyTag = function (options, callback) {
        return (0, internal_1.request)(this.credentials, (0, mappers_1.mapPayload)(options, {
            cmd: constants_1.CMDS.BUY_TAG,
        }), callback);
    };
    return Coinpayments;
}());
exports.Coinpayments = Coinpayments;
module.exports = Coinpayments;
module.exports.default = Coinpayments;
module.exports.Coinpayments = Coinpayments;
exports.default = Coinpayments;
